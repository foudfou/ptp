#!/usr/bin/env python3

"""Script for single server integration tests."""

import os
import re
import socket
import subprocess as sub
import sys

HOST = '::1'
PORT = 22220
TIMEOUT_IN_SEC = 1

path = os.path.abspath(os.path.join(os.path.dirname(__file__)))  # pylint: disable=invalid-name

server_bin = sys.argv[1]
command = [server_bin, "-l", "error", "-a", HOST, "-p", str(PORT)]  # pylint: disable=invalid-name
command.extend(sys.argv[2:])
server = sub.Popen(command)

messages = [
    # name, message send, expected response
    ("ping request missing id", b'd1:ade1:q4:ping1:t2:XX1:y1:qe', b'^d1:t2:XX1:y1:r1:rd2:id20:.{20}ee$'),
]

try:
    with socket.socket(socket.AF_INET6, socket.SOCK_DGRAM) as s:
        s.settimeout(TIMEOUT_IN_SEC)
        s.connect((HOST, PORT))

        failures = 0
        messages_len = len(messages)
        i = 0
        for name, msg, expected in messages:
            i += 1

            # Can't reliably test that the UDP server is up and responding.
            received = None
            while received is None:
                try:
                    s.sendall(msg)
                    data = s.recv(1024)
                    received = True
                except ConnectionRefusedError:
                    pass

            patt = re.compile(expected, re.DOTALL)

            if re.search(patt, data):
                result = "OK"
                err = None
            else:
                failures += 1
                result = "\033[31mFAIL\033[0m"
                err = data
            print("{}/{} {} .. {}".format(i, messages_len, name, result))
            if err:
                print("---\n   data {} did not match expected {}".format(data, expected))

finally:
    server.terminate()

retcode = 1 if failures else 0
sys.exit(retcode)
