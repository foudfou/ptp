#!/usr/bin/env python3
# Copyright (c) 2017-2019 Foudil BrÃ©tel.  All rights reserved.

"""Script for single server integration tests."""


import importlib
import os
import pty
import re
import socket
import subprocess as sub
import sys
import tempfile

SERVER_HOST = '::1'
# SERVER_PORT is used by the server and the client. We thus can't simply bind
# the server to 0 for some random available port. Because we'd have to guess
# the port somehow for the client to connect. It's just easier to use a fixed
# value.
SERVER_PORT = 22220
TIMEOUT_IN_SEC = 1

path = os.path.abspath(os.path.join(os.path.dirname(__file__)))  # pylint: disable=invalid-name

run = importlib.import_module("runs." + sys.argv[1])

server_bin  = sys.argv[2]
server_args = sys.argv[3:]
server_cmd = [server_bin, "-l", "error", "-a", SERVER_HOST, "-p", str(SERVER_PORT)]  # pylint: disable=invalid-name
server_cmd.extend(server_args)

def poll_data(sock, msg):
    data_rx = None
    # Can't reliably test that the UDP server is up and responding.
    received = None
    while received is None:
        try:
            sock.sendall(msg)
            data_rx = sock.recv(1024)
            received = True
        except ConnectionRefusedError:
            pass
        except socket.timeout:
            break
    return data_rx


def check_data(expect, data, ctx):
    failure = 0
    patt = re.compile(expect, re.DOTALL)
    if re.search(patt, data):
        result = "OK"
        err = None
    else:
        failure += 1
        result = "\033[31mFAIL\033[0m"
        err = data
    print("{}/{} {} .. {}".format(ctx['line'], ctx['len'], ctx['name'], result))
    if err:
        print("---\n   data {} did not match expected {}".format(data, expect))
    return failure



try:
    config_idx = server_cmd.index('-c')
except ValueError:
    try:
        config_idx = server_cmd.index('--config')
    except ValueError:
        config_idx = -1
if config_idx > 0:
    conf_orig = server_cmd[config_idx+1]
    conf_tmp = tempfile.TemporaryDirectory()
    if os.path.isdir(conf_orig):
        from distutils.dir_util import copy_tree
        copy_tree(conf_orig, conf_tmp.name)
    server_cmd[config_idx+1] = conf_tmp.name

try:
    # It's generally hard to get the live output of a running subprocess in
    # python. One trick is to use an intermediary fd, and use `os.read(master_fd,
    # 512)`. But we want to avoid checking the logs and test server error handling
    # in unit tests.
    master_fd, slave_fd = pty.openpty()
    server = sub.Popen(server_cmd, stderr=sub.STDOUT, close_fds=True)
    os.close(slave_fd)

    with socket.socket(socket.AF_INET6, socket.SOCK_DGRAM) as s:
        s.settimeout(TIMEOUT_IN_SEC)
        s.connect((SERVER_HOST, SERVER_PORT))

        failures = 0
        messages_len = len(run.MESSAGES)
        i = 0
        for name, (msg, expect) in run.MESSAGES.items():
            i += 1
            data = poll_data(s, msg)
            ctx = {"line": i, "len": messages_len, "name": name}
            failures += check_data(expect, data, ctx)

finally:
    os.close(master_fd)
    server.terminate()

retcode = 1 if failures else 0
sys.exit(retcode)
