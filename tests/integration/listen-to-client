#!/usr/bin/env python3
# Copyright (c) 2020 Foudil Br√©tel.  All rights reserved.

"""Script for single client integration tests."""


import os
import re
import socket
import subprocess as sub
import sys
import tempfile

SERVER_HOST = '::1'
SERVER_PORT = 0
SOCKET_TIMEOUT_SECONDS = 1

path = os.path.abspath(os.path.join(os.path.dirname(__file__)))  # pylint: disable=invalid-name

server_bin  = sys.argv[1]
server_args = sys.argv[2:]
server_cmd = [server_bin, "-l", "error", "-a", SERVER_HOST, "-p", str(SERVER_PORT)]  # pylint: disable=invalid-name
server_cmd.extend(server_args)


EXPECTED_MESSAGES = [
    ("find_node", b"^d1:t2:(.){2}1:y1:q1:q9:find_node1:ad6:target20:(?P<id>.{20})2:id20:(?P=id)ee$")
]

def check_data(expect, data, ctx):
    failure = 0
    patt = re.compile(expect, re.DOTALL)
    if re.search(patt, data):
        result = "OK"
        err = None
    else:
        failure += 1
        result = "\033[31mFAIL\033[0m"
        err = data
    print("{}/{} {} .. {}".format(ctx['line'], ctx['len'], ctx['name'], result))
    if err:
        print("---\n   data {} did not match expected {}".format(data, expect))
    return failure

def port_to_bigendian_bytes(port):
    return port.to_bytes((port.bit_length() + 7) // 8, 'big') or b'\0'


try:
    config_idx = server_cmd.index('-c')
except ValueError:
    try:
        config_idx = server_cmd.index('--config')
    except ValueError:
        config_idx = -1
if config_idx > 0:
    print("--config option not allowed", file=sys.stderr)
    sys.exit(1)


with tempfile.TemporaryDirectory() as tmp_dir, \
     socket.socket(socket.AF_INET6, socket.SOCK_DGRAM) as s:
    # print(tmp_dir)
    try:
        s.settimeout(SOCKET_TIMEOUT_SECONDS)
        s.bind((SERVER_HOST, 0))
        port = s.getsockname()[1]
        # print(port)
        port_bytes = port_to_bigendian_bytes(port)

        bootstrap_bin = b"l18:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1" + port_bytes + b"e"
        bootstrap_path = os.path.join(tmp_dir, "nodes.dat")
        with open(bootstrap_path, 'wb') as f:
            f.write(bootstrap_bin)

        server_cmd.extend(["-c", tmp_dir])
        # print(server_cmd)
        server = sub.Popen(server_cmd, stderr=sub.STDOUT, close_fds=True)

        BUFFER_SIZE = 1024
        messages_len = len(EXPECTED_MESSAGES)
        msg_count = 0
        failures = 0
        while msg_count < messages_len:
            data, addr = s.recvfrom(BUFFER_SIZE)
            # print("received message: ", data)
            ctx = {"line": msg_count, "len": messages_len, "name": EXPECTED_MESSAGES[msg_count][0]}
            failures += check_data(EXPECTED_MESSAGES[msg_count][1], data, ctx)
            msg_count += 1

    finally:
        server.terminate()
        server.wait(1)

        import shutil
        shutil.rmtree(tmp_dir)



retcode = 1 if failures else 0
sys.exit(retcode)
