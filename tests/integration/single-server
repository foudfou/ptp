#!/usr/bin/env python3
# Copyright (c) 2017-2019 Foudil BrÃ©tel.  All rights reserved.

"""Script for single server integration tests."""


import os
import pty
import re
import socket
import subprocess as sub
import sys

SERVER_HOST = '::1'
# SERVER_PORT is used by the server and the client. We thus can't simply bind
# the server to 0 for some random available port. Because we'd have to guess
# the port somehow for the client to connect. It's just easier to use a fixed
# value.
SERVER_PORT = 22220
TIMEOUT_IN_SEC = 1

MESSAGES = {
    # name -> message send, expected response
    "ping request":
    (b'd1:ad2:id20:\x16\x01\xfb\xa7\xca\x18P\x9e\xe5\x1d\xcc\x0e\xf8\xc6Z\x1a\xfe<s\x81e1:q4:ping1:t2:aa1:y1:qe',
     b'^d1:t2:aa1:y1:r1:rd2:id20:.{20}ee$'),
    "ping request missing id":
    (b'd1:ade1:q4:ping1:t2:XX1:y1:qe', b'^d1:t2:XX1:y1:e1:eli203e14:Protocol Erroree$'),
    "find_node request":
    (b'd1:ad2:id20:abcdefghij01234567896:target20:mnopqrstuvwxyz123456e1:q9:find_node1:t2:aa1:y1:qe',
     b'^d1:t2:aa1:y1:r1:rd5:nodesl(26|38):.*ee$'),
}


path = os.path.abspath(os.path.join(os.path.dirname(__file__)))  # pylint: disable=invalid-name

server_bin = sys.argv[1]
command = [server_bin, "-l", "error", "-a", SERVER_HOST, "-p", str(SERVER_PORT)]  # pylint: disable=invalid-name
command.extend(sys.argv[2:])
# It's generally hard to get the live output of a running subprocess in
# python. One trick is to use an intermediary fd, and use `os.read(master_fd,
# 512)`. But we want to avoid checking the logs and test server error handling
# in unit tests.
master_fd, slave_fd = pty.openpty()
# server = sub.Popen(command, stdout=slave_fd, stderr=sub.STDOUT, close_fds=True)
server = sub.Popen(command, stderr=sub.STDOUT, close_fds=True)
os.close(slave_fd)


def poll_data(sock):
    data = None
    # Can't reliably test that the UDP server is up and responding.
    received = None
    while received is None:
        try:
            sock.sendall(msg)
            data = sock.recv(1024)
            received = True
        except ConnectionRefusedError:
            pass
        except socket.timeout:
            break
    return data


def check_data(expect, data):
    failure = 0
    patt = re.compile(expect, re.DOTALL)
    if re.search(patt, data):
        result = "OK"
        err = None
    else:
        failure += 1
        result = "\033[31mFAIL\033[0m"
        err = data
    print("{}/{} {} .. {}".format(i, messages_len, name, result))
    if err:
        print("---\n   data {} did not match expected {}".format(data, expect))
    return failure


try:
    with socket.socket(socket.AF_INET6, socket.SOCK_DGRAM) as s:
        s.settimeout(TIMEOUT_IN_SEC)
        s.connect((SERVER_HOST, SERVER_PORT))

        failures = 0
        messages_len = len(MESSAGES)
        i = 0
        for name, (msg, expect) in MESSAGES.items():
            i += 1
            data = poll_data(s)
            failures += check_data(expect, data)

finally:
    os.close(master_fd)
    server.terminate()

retcode = 1 if failures else 0
sys.exit(retcode)
