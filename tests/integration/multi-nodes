#!/usr/bin/env python3
# Copyright (c) 2020 Foudil BrÃ©tel.  All rights reserved.

"""
Script for multiple agents integration tests.

One bootstrap and 2 agents.
"""

import os
import random
import time
import socket
import subprocess as sub
import sys
import tempfile

from contextlib import contextmanager
import common as c


DEBUG = False

def rand_node_id():
    return bytes([random.randint(0, 255) for _ in range(20)])

NODES_LEN = 3
NODES = [
    b"1234567890abcdefghij", # 0x3132, bootstrap node
    b"abcdefghij1234567890", # 0x6162
    b"mnopqrstuv0987654321", # 0x6D6E
]
# Increasing node count will fail tests because replacement cache is not
# included into persisted routes.
NODES.extend([rand_node_id() for _ in range(NODES_LEN - len(NODES))])

SLEEP_BOOTSTRAP_NODE_READY = .01
SLEEP_NODES_FINISH = .2

SERVER_HOST = c.DEFAULT_SERVER_HOST
SOCKET_TIMEOUT_SECONDS = 1

path = os.path.abspath(os.path.join(os.path.dirname(__file__)))  # pylint: disable=invalid-name

server_bin  = sys.argv[1]
server_args = sys.argv[2:]
server_cmd = [server_bin, "-l", "debug" if DEBUG else "error", "-a", SERVER_HOST]  # pylint: disable=invalid-name
server_cmd.extend(server_args)


def free_port():
    """
    Determines a free port using sockets.

    https://stackoverflow.com/a/47964377 but has issues:
    https://eklitzke.org/binding-on-port-zero
    Works as long as set SO_REUSEADDR in server.
    """
    free_socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
    free_socket.bind((SERVER_HOST, 0))
    port = free_socket.getsockname()[1]
    free_socket.close()
    return port


def create_node(cmd, tmp_dir=None, bootstrap=None, nodeid=None):
    routes_bin = b"d2:id20:" + nodeid + b"5:nodeslee"
    routes_path = os.path.join(tmp_dir, "routes.dat")
    with open(routes_path, 'wb') as f:
        f.write(routes_bin)

    if bootstrap is not None:
        port_bytes = c.port_to_bigendian_bytes(bootstrap)
        bootstrap_bin = b"l38:1234567890abcdefghij\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1" + port_bytes + b"e"
        bootstrap_path = os.path.join(tmp_dir, "nodes.dat")
        with open(bootstrap_path, 'wb') as f:
            f.write(bootstrap_bin)

    port = free_port()
    cmd.extend(["-p", str(port), "-c", tmp_dir])

    server = sub.Popen(cmd, stderr=sub.STDOUT, close_fds=True, stdout=sub.PIPE)
    return (server, port)

@contextmanager
def tmpdirs(count):
    dirs = [tempfile.TemporaryDirectory() for i in range(count)]
    try:
        yield dirs
    finally:
        for d in dirs:
            d.cleanup()



config_idx = c.find_config_option(server_cmd)
if config_idx > 0:
    print("--config option not allowed", file=sys.stderr)
    sys.exit(1)


with tmpdirs(NODES_LEN) as tmp_dirs:
    dirs = [d.name for d in tmp_dirs]

    try:
        instances = []

        (bootnode, bootnode_port) = create_node(
            server_cmd.copy(), tmp_dir=dirs[0],
            nodeid=NODES[0]
        )
        instances.append((bootnode, bootnode_port))

        time.sleep(SLEEP_BOOTSTRAP_NODE_READY)

        for i in range(1, NODES_LEN):
            instances.append(create_node(
                server_cmd.copy(), tmp_dir=dirs[i], bootstrap=bootnode_port,
                nodeid=NODES[i]
            ))
#            time.sleep(SLEEP_BOOTSTRAP_NODE_READY)

        time.sleep(SLEEP_NODES_FINISH)

    finally:
        for s in [server for server, port in list(reversed(instances))]:
            s.terminate()
            if DEBUG:
                outs, errs = s.communicate(timeout=15)
            s.wait(1)
            if DEBUG:
                if outs:
                    with open(f'/tmp/{str(s.pid)}.out', 'wb') as fd:
                        fd.write(outs)
                if errs:
                    with open(f'/tmp/{str(s.pid)}.err', 'wb') as fd:
                        fd.write(errs)

        # import shutil
        # shutil.copyfile(tmp_dir1 + "/routes.dat", "/tmp/routes1.dat")

        routes = []
        for i in range(NODES_LEN):
            with open(dirs[i] + "/routes.dat", 'rb') as fd:
                routes.append(fd.read())

        failures = 0

        def extract_routes(me, data):
            ret = {}

            if data[0:c.BENCODE_HEADER_SIZE] != b'd2:id20:' + me + b'5:nodesl' or \
               data[-c.BENCODE_FOOTER_SIZE:] != b'ee':
                return ret

            nodes = data[c.BENCODE_HEADER_SIZE:-c.BENCODE_FOOTER_SIZE]

            node_ids = []
            i = 0
            while len(nodes) - c.NODE_ENTRY_COMPACT_SIZE > i:
                length = nodes[i:i+3]
                if length == b'26:':
                    j = c.NODE_ENTRY_COMPACT_SIZE
                elif length == b'38:':
                    j = c.NODE_ENTRY_FULL_SIZE
                else:
                    return ret
                i += 3
                node_ids.append(nodes[i:i+20])
                i += j

            return set(node_ids)

        nodes_set = set(NODES)
        for i in range(NODES_LEN):
            node_routes = extract_routes(NODES[i], routes[i])
            if node_routes == nodes_set - {NODES[i]}:
                result = "OK"
                data = None
            else:
                failures += 1
                result = "\033[31mFAIL\033[0m"
                data = routes[i]
            print(f"{i+1}/{NODES_LEN} routes_{i} .. {result}")
            if data:
                print(f"---\n   incorrect data {data}")


retcode = 1 if failures else 0
sys.exit(retcode)
