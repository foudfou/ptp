#!/usr/bin/env python3
# Copyright (c) 2020 Foudil BrÃ©tel.  All rights reserved.

"""
Script for multiple agents integration tests.

One bootstrap and 2 agents.
"""

import os
import time
import socket
import subprocess as sub
import sys
import tempfile

from helpers import check_data

SERVER_HOST = '::1'
SOCKET_TIMEOUT_SECONDS = 1

path = os.path.abspath(os.path.join(os.path.dirname(__file__)))  # pylint: disable=invalid-name

server_bin  = sys.argv[1]
server_args = sys.argv[2:]
server_cmd = [server_bin, "-l", "error", "-a", SERVER_HOST]  # pylint: disable=invalid-name
server_cmd.extend(server_args)


EXPECTED_MESSAGES = [
    ("ping", b'^d1:t2:(.){2}1:y1:q1:q4:ping1:ad2:id20:(.){20}ee$')
]

def free_port():
    """
    Determines a free port using sockets.

    https://stackoverflow.com/a/47964377 but has issues:
    https://eklitzke.org/binding-on-port-zero
    Works as long as set SO_REUSEADDR in server.
    """
    free_socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
    free_socket.bind((SERVER_HOST, 0))
    port = free_socket.getsockname()[1]
    free_socket.close()
    return port

def port_to_bigendian_bytes(port):
    return port.to_bytes((port.bit_length() + 7) // 8, 'big') or b'\0'

def create_node(cmd, tmp_dir=None, bootstrap=None, nodeid=None):
    routes_bin = b"d2:id20:" + nodeid + b"5:nodeslee"
    routes_path = os.path.join(tmp_dir, "routes.dat")
    with open(routes_path, 'wb') as f:
        f.write(routes_bin)

    if bootstrap is not None:
        port_bytes = port_to_bigendian_bytes(bootstrap)
        bootstrap_bin = b"l38:1234567890abcdefghij\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1" + port_bytes + b"e"
        bootstrap_path = os.path.join(tmp_dir, "nodes.dat")
        with open(bootstrap_path, 'wb') as f:
            f.write(bootstrap_bin)

    port = free_port()
    cmd.extend(["-p", str(port), "-c", tmp_dir])

    server = sub.Popen(cmd, stderr=sub.STDOUT, close_fds=True)
    return (server, port)



try:
    config_idx = server_cmd.index('-c')
except ValueError:
    try:
        config_idx = server_cmd.index('--config')
    except ValueError:
        config_idx = -1
if config_idx > 0:
    print("--config option not allowed", file=sys.stderr)
    sys.exit(1)



with tempfile.TemporaryDirectory() as tmp_dir1, \
     tempfile.TemporaryDirectory() as tmp_dir2, \
     tempfile.TemporaryDirectory() as tmp_dir3:
    try:
        bootnode_id = b"1234567890abcdefghij"
        (bootnode, bootnode_port) = create_node(
            server_cmd.copy(), tmp_dir=tmp_dir1,
            nodeid=bootnode_id
        )

        node2_id = b"abcdefghij1234567890"
        (node2, node2_port) = create_node(
            server_cmd.copy(), tmp_dir=tmp_dir2, bootstrap=bootnode_port,
            nodeid=node2_id
        )

        node3_id = b"mnopqrstuv0987654321"
        (node3, node3_port) = create_node(
            server_cmd.copy(), tmp_dir=tmp_dir3, bootstrap=bootnode_port,
            nodeid=node3_id
        )

        time.sleep(.3)

    finally:
        for s in [node3, node2, bootnode]:
            s.terminate()
            s.wait(1)

        # import shutil
        # shutil.copyfile(tmp_dir1 + "/routes.dat", "/tmp/routes1.dat")
        # shutil.copyfile(tmp_dir2 + "/routes.dat", "/tmp/routes2.dat")
        # shutil.copyfile(tmp_dir3 + "/routes.dat", "/tmp/routes3.dat")

        with open(tmp_dir1 + "/routes.dat", 'rb') as fd1, \
             open(tmp_dir2 + "/routes.dat", 'rb') as fd2, \
             open(tmp_dir3 + "/routes.dat", 'rb') as fd3:
            routes1 = fd1.read()
            routes2 = fd2.read()
            routes3 = fd3.read()

        failures = 0

        def routes_re(me, other1, other2):
            return \
                b'd2:id20:' + me + b'5:nodesl' + \
                b'(38:' + other1 + b'(.{6}|.{18})38:' + other2 + b'(.{6}|.{18})|' + \
                b'38:' + other2 + b'(.{6}|.{18})38:' + other1 + b'(.{6}|.{18}))' + \
                b'ee'

        failures += check_data(
            routes_re(bootnode_id, node2_id, node3_id),
            routes1, {"line": 1, "len": 3, "name": "bootnode routes"})

        failures += check_data(
            routes_re(node2_id, node3_id, bootnode_id),
            routes2, {"line": 2, "len": 3, "name": "node2 routes"})

        failures += check_data(
            routes_re(node3_id, bootnode_id, node2_id),
            routes3, {"line": 3, "len": 3, "name": "node3 routes"})

retcode = 1 if failures else 0
sys.exit(retcode)
