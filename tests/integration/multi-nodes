#!/usr/bin/env python3
# Copyright (c) 2020 Foudil BrÃ©tel.  All rights reserved.

"""
Script for multiple agents integration tests.

One bootstrap and 2 agents.
"""


import os
import time
import socket
import subprocess as sub
import sys
import tempfile

SERVER_HOST = '::1'
SOCKET_TIMEOUT_SECONDS = 1

path = os.path.abspath(os.path.join(os.path.dirname(__file__)))  # pylint: disable=invalid-name

server_bin  = sys.argv[1]
server_args = sys.argv[2:]
server_cmd = [server_bin, "-l", "debug", "-a", SERVER_HOST]  # pylint: disable=invalid-name
server_cmd.extend(server_args)


EXPECTED_MESSAGES = [
    ("ping", b'^d1:t2:(.){2}1:y1:q1:q4:ping1:ad2:id20:(.){20}ee$')
]

def free_port():
    """
    Determines a free port using sockets.

    https://stackoverflow.com/a/47964377 but has issues:
    https://eklitzke.org/binding-on-port-zero
    Works as long as set SO_REUSEADDR in server.
    """
    free_socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
    free_socket.bind((SERVER_HOST, 0))
    port = free_socket.getsockname()[1]
    free_socket.close()
    return port

def port_to_bigendian_bytes(port):
    return port.to_bytes((port.bit_length() + 7) // 8, 'big') or b'\0'

def create_node(cmd, tmp_dir=None, bootstrap=None, nodeid=None):
    dht_bin = b"d2:id20:" + nodeid + b"5:nodeslee"
    dht_path = os.path.join(tmp_dir, "dht.dat")
    with open(dht_path, 'wb') as f:
        f.write(dht_bin)

    if bootstrap is not None:
        port_bytes = port_to_bigendian_bytes(bootstrap)
        bootstrap_bin = b"l18:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1" + port_bytes + b"e"
        bootstrap_path = os.path.join(tmp_dir, "nodes.dat")
        with open(bootstrap_path, 'wb') as f:
            f.write(bootstrap_bin)

    port = free_port()
    cmd.extend(["-p", str(port), "-c", tmp_dir])
    print(cmd)

    server = sub.Popen(cmd, stderr=sub.STDOUT, close_fds=True)
    return (server, port)



try:
    config_idx = server_cmd.index('-c')
except ValueError:
    try:
        config_idx = server_cmd.index('--config')
    except ValueError:
        config_idx = -1
if config_idx > 0:
    print("--config option not allowed", file=sys.stderr)
    sys.exit(1)



with tempfile.TemporaryDirectory() as tmp_dir1, \
     tempfile.TemporaryDirectory() as tmp_dir2, \
     tempfile.TemporaryDirectory() as tmp_dir3:
    try:
        print(tmp_dir1)
        print(tmp_dir2)
        print(tmp_dir3)
        (bootnode, bootnode_port) = create_node(
            server_cmd.copy(), tmp_dir=tmp_dir1,
            nodeid=b"1234567890abcdefghij"
        )
        (node2, node2_port) = create_node(
            server_cmd.copy(), tmp_dir=tmp_dir2, bootstrap=bootnode_port,
            nodeid=b"abcdefghij1234567890"
        )
        (node3, node3_port) = create_node(
            server_cmd.copy(), tmp_dir=tmp_dir3, bootstrap=bootnode_port,
            nodeid=b"mnopqrstuv0987654321"
        )

        failures = 0
        time.sleep(.05)

    finally:
        for s in [node3, node2, bootnode]:
            s.terminate()
            s.wait(1)

        import shutil
        shutil.copyfile(tmp_dir1 + "/dht.dat", "/tmp/dht1.dat")
        shutil.copyfile(tmp_dir2 + "/dht.dat", "/tmp/dht2.dat")
        shutil.copyfile(tmp_dir3 + "/dht.dat", "/tmp/dht3.dat")

        # TODO inspect dht contents. After bootstrap we expect node2 *or* node3
        # to know about the other one. After refresh we expect both nodes to
        # know about each other.

        # shutil.rmtree(tmp_dir)
        print(os.listdir(tmp_dir1))
        print(os.listdir(tmp_dir2))
        print(os.listdir(tmp_dir3))


retcode = 1 if failures else 0
sys.exit(retcode)
